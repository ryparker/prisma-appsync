{% set modelFieldUnique = false -%}
{% set modelField = false -%}
{% set modelFieldSecondary = false -%}
{% set modelRelationOne = false -%}
{% set modelRelationMany = false -%}
{% for field in model.fields -%}
    {% if (field.isUnique) and not modelFieldUnique -%}
        {% set modelFieldUnique = field -%}
    {% endif -%}
    {% if (not field.isUnique and not field.relation) and not modelField -%}
        {% set modelField = field -%}
    {% elseif (not field.isUnique and not field.relation) and not modelFieldSecondary -%}
        {% set modelFieldSecondary = field -%}
    {% endif -%}
    {% if (field.relation and field.relation.kind === 'one') and not modelRelationOne -%}
        {% set modelRelationOne = field -%}
    {% endif -%}
    {% if (field.relation and field.relation.kind === 'many') and not modelRelationMany -%}
        {% set modelRelationMany = field -%}
    {% endif -%}
{% endfor -%}
# {{ model.name }}

- [Fields](#fields)
- [Queries](#queries)
- [Mutations](#mutations)
- [Subscriptions](#subscriptions)

## Fields

List of fields available in the `{{ model.name }}` type.

| Field | Scalar Type | Unique | Required (create)
|---|---|---|---|
{% for field in model.fields -%}
| {{ field.name }} | {% if field.relation %}[{{ field.scalar }}](./{{ field.relation.type }}.md){% else %}{{ field.scalar }}{%endif%} | {% if field.isUnique -%}true{% else %}*false*{% endif %} | {% if field.isRequired -%}true{% else %}*false*{% endif %} |
{% endfor -%}


## Queries

Queries are responsible for all `Read` operations.

The generated queries are:

- `get{{ model.name }}`: Read a single {{ model.name }}.
- `list{{ model.pluralizedName }}`: Read multiple {{ model.pluralizedName }}.
- `count{{ model.pluralizedName }}`: Count all {{ model.pluralizedName }}.

### Querying a single {{ model.name }}

Single {{ model.name }} queries take one input:

- `where`: `{{ model.name }}WhereUniqueInput!` A required object type specifying a field with a unique constraint (like {{ modelFieldUnique.name }}).

**Standard query**

```graphql
query {
    get{{ model.name }}(where: { {{ modelFieldUnique.name }}: {{ modelFieldUnique.sample | safe }} }) {
        {% for field in model.fields -%}
        {% if field.relation and field.relation.kind === 'one' -%}
        {{ field.name }} # Relation to one
        {% elseif  field.relation and field.relation.kind === 'many' %}
        {{ field.name }} # Relation to many
        {% else -%}
        {{ field.name }}
        {% endif -%}
        {% endfor -%}
    }
}
```

### Querying multiple {{ model.pluralizedName }}

Multiple {{ model.pluralizedName }} queries can take four inputs:

- `where`: `{{ model.name }}WhereFilterInput` An optional object type to filter the content based on a nested set of criteria.
- `orderBy`: `[{{ model.name }}OrderByInput]` An optional array to select which field(s) and order to sort the records on. Sorting can be in ascending order `ASC` or descending order `DESC`.
- `skip`: `Int` An optional number that specifies how many of the returned objects in the list should be skipped.
- `take`: `Int` An optional number that specifies how many objects should be returned in the list.

**Standard query**

```graphql
query {
    list{{ model.pluralizedName }} {
        {% for field in model.fields -%}
        {% if field.relation and field.relation.kind === 'one' -%}
        {{ field.name }} # Relation to one
        {% elseif  field.relation and field.relation.kind === 'many' %}
        {{ field.name }} # Relation to many
        {% else -%}
        {{ field.name }}
        {% endif -%}
        {% endfor -%}
    }
}
```

**Standard query with offset pagination**

```graphql
query {
    list{{ model.pluralizedName }}(
        skip: 0
        take: 25
    ) {
        {% for field in model.fields -%}
        {% if field.relation and field.relation.kind === 'one' -%}
        {{ field.name }} # Relation to one
        {% elseif  field.relation and field.relation.kind === 'many' %}
        {{ field.name }} # Relation to many
        {% else -%}
        {{ field.name }}
        {% endif -%}
        {% endfor -%}
    }
}
```

**Standard query with basic where filter**

```graphql
query {
    list{{ model.pluralizedName }}(where: {
        {{ modelField.name }}: { equals: {{ modelField.sample | safe }}}
    }) {
        {% for field in model.fields -%}
        {% if field.relation and field.relation.kind === 'one' -%}
        {{ field.name }} # Relation to one
        {% elseif  field.relation and field.relation.kind === 'many' %}
        {{ field.name }} # Relation to many
        {% else -%}
        {{ field.name }}
        {% endif -%}
        {% endfor -%}
    }
}
```

**Standard query with more advanced where filter**

```graphql
query {
    list{{ model.pluralizedName }}(where: {
        {{ modelField.name }}: { not: { equals: {{ modelField.sample | safe }} } }
    }) {
        {% for field in model.fields -%}
        {% if field.relation and field.relation.kind === 'one' -%}
        {{ field.name }} # Relation to one
        {% elseif  field.relation and field.relation.kind === 'many' %}
        {{ field.name }} # Relation to many
        {% else -%}
        {{ field.name }}
        {% endif -%}
        {% endfor -%}
    }
}
```

**Standard query with orderBy**

```graphql
query {
    list{{ model.pluralizedName }}(
        orderBy: [
            { {{ modelField.name }}: DESC }
            {% if modelFieldSecondary -%}{ {{ modelFieldSecondary.name }}: ASC }{% endif -%}
        ]
    ) {
        {% for field in model.fields -%}
        {% if field.relation and field.relation.kind === 'one' -%}
        {{ field.name }} # Relation to one
        {% elseif  field.relation and field.relation.kind === 'many' %}
        {{ field.name }} # Relation to many
        {% else -%}
        {{ field.name }}
        {% endif -%}
        {% endfor -%}
    }
}
```

### Counting {{ model.pluralizedName }}

Counting {{ model.pluralizedName }} queries can take four inputs:

- `where`: `{{ model.name }}WhereFilterInput` An optional object type to filter the content based on a nested set of criteria.
- `orderBy`: `[{{ model.name }}OrderByInput]` An optional array to select which field(s) and order to sort the records on. Sorting can be in ascending order `ASC` or descending order `DESC`.
- `skip`: `Int` An optional number that specifies how many of the returned objects in the list should be skipped.
- `take`: `Int` An optional number that specifies how many objects should be returned in the list.

**Standard query**

```graphql
query {
    count{{ model.pluralizedName }}
}
```

> `count{{ model.pluralizedName }}` returns an integer that represents the number of records found.

## Mutations

Mutations are responsible for all `Create`, `Update`, and `Delete` operations.

The generated mutations are:

- `create{{ model.name }}`: Create a single {{ model.name }}.
- `update{{ model.name }}`: Update a single {{ model.name }}.
- `upsert{{ model.name }}`: Update existing OR create single {{ model.name }}.
- `delete{{ model.name }}`: Delete a single {{ model.name }}.
- `createMany{{ model.pluralizedName }}`: Create multiple {{ model.pluralizedName }}.
- `updateMany{{ model.pluralizedName }}`: Update multiple {{ model.pluralizedName }}.
- `deleteMany{{ model.pluralizedName }}`: Delete multiple {{ model.pluralizedName }}.

### Creating a single {{ model.name }}

Single {{ model.name }} create mutations take one input:

- `data`: `{{ model.name }}CreateInput!` A required object type specifying the data to create a new record.

**Standard create mutation**

```graphql
mutation {
    create{{ model.name }}(
        data: {
            {% for field in model.fields -%}
            {% if not field.relation and field.name !== 'id' and not field.isUpdatedAt and field.name !== 'createdAt' and field.name !== 'updatedAt' -%}
            {{ field.name }}: {{ field.sample | safe }}
            {% endif -%}
            {% endfor -%}
        }
    ) {
        {% for field in model.fields -%}
        {% if not field.relation -%}
        {{ field.name }}
        {% endif -%}
        {% endfor -%}
    }
}
```

{% if modelRelationOne or modelRelationMany -%}
**Advanced create mutation using relation queries**

<details><summary>List of all nested queries available</summary>
<p>

```graphql
{% for field in model.fields -%}
{% if field.relation and field.relation.kind === 'one' -%}
{{ field.name }}: {
    create: {{ field.relation.name }}CreateInput, # Relation to one
    connect: {{ field.relation.name }}WhereUniqueInput, # Relation to one
    connectOrCreate: {{ field.relation.name }}ConnectOrCreateInput # Relation to one
}
{% elseif field.relation and field.relation.kind === 'many' -%}
{{ field.name }}: {
    create: [{{ field.relation.name }}CreateInput], # Relation to many
    connect: [{{ field.relation.name }}WhereUniqueInput], # Relation to many
    connectOrCreate: [{{ field.relation.name }}ConnectOrCreateInput] # Relation to many
}
{% endif -%}
{% endfor -%}
```

</p>
</details>

```graphql
mutation {
    create{{ model.name }}(
        data: {
            {% if modelRelationOne -%}
            {{ modelRelationOne.name }}: {
                connectOrCreate: {
                    where: {{ model.name }}WhereUniqueInput,
                    create: {{ model.name }}CreateInput
                }
            }
            {% endif -%}
            {% if modelRelationMany -%}
            {{ modelRelationMany.name }}: {
                connectOrCreate: [
                    {
                        where: {{ model.name }}WhereUniqueInput,
                        create: {{ model.name }}CreateInput
                    }
                ]
            }
            {% endif -%}
        }
    ) {
        {{ modelFieldUnique.name }}
    }
}
```
{% endif -%}

### Updating a single {{ model.name }}

Single {{ model.name }} update mutations take two inputs:

- `where`: `{{ model.name }}WhereUniqueInput!` A required object type specifying a field with a unique constraint (like {{ modelFieldUnique.name }}).
- `data`: `{{ model.name }}UpdateInput!` A required object type specifying the data to update.

**Standard update mutation**

```graphql
mutation {
    update{{ model.name }}(
        where: {
            {{ modelFieldUnique.name }}: {{ modelFieldUnique.sample | safe }}
        }
        data: {
            {% for field in model.fields -%}
            {% if not field.relation and field.name !== 'id' and not field.isUpdatedAt and field.name !== 'createdAt' and field.name !== 'updatedAt' -%}
            {{ field.name }}: {{ field.sample | safe }}
            {% endif -%}
            {% endfor -%}
        }
    ) {
        {% for field in model.fields -%}
        {% if not field.relation -%}
        {{ field.name }}
        {% endif -%}
        {% endfor -%}
    }
}
```

{% if modelRelationOne or modelRelationMany -%}
**Advanced update mutation using relation queries**

<details><summary>List of all nested queries available</summary>
<p>

```graphql
{% for field in model.fields -%}
{% if field.relation and field.relation.kind === 'one' -%}
{{ field.name }}: {
    create: {{ field.relation.name }}CreateInput, # Relation to one
    connect: {{ field.relation.name }}WhereUniqueInput, # Relation to one
    connectOrCreate: {{ field.relation.name }}ConnectOrCreateInput, # Relation to one
    update: {{ field.relation.name }}UpdateInput, # Relation to one
    upsert: {{ field.relation.name }}UpsertInput, # Relation to one
    delete: true,
    disconnect: true,
}
{% elseif field.relation and field.relation.kind === 'many'  -%}
{{ field.name }}: {
    create: [{{ field.relation.name }}CreateInput], # Relation to many
    connect: [{{ field.relation.name }}WhereUniqueInput], # Relation to many
    connectOrCreate: [{{ field.relation.name }}ConnectOrCreateInput], # Relation to many
    update: [{{ field.relation.name }}UpdateUniqueInput], # Relation to many
    upsert: [{{ field.relation.name }}UpsertUniqueInput], # Relation to many
    delete: [{{ field.relation.name }}DeleteUniqueInput], # Relation to many
    disconnect: [{{ field.relation.name }}WhereUniqueInput], # Relation to many
    set: [{{ field.relation.name }}WhereUniqueInput], # Relation to many
    updateMany: [{{ field.relation.name }}UpdateManyInput], # Relation to many
    deleteMany: [{{ field.relation.name }}DeleteManyInput], # Relation to many
}
{% endif -%}
{% endfor -%}
```

</p>
</details>

```graphql
mutation {
    update{{ model.name }}(
        data: {
            {% if modelRelationOne -%}
            {{ modelRelationOne.name }}: {
                connectOrCreate: {
                    where: {{ model.name }}WhereUniqueInput,
                    create: {{ model.name }}CreateInput
                }
            }
            {% endif -%}
            {% if modelRelationMany -%}
            {{ modelRelationMany.name }}: {
                connectOrCreate: [
                    {
                        where: {{ model.name }}WhereUniqueInput,
                        create: {{ model.name }}CreateInput
                    }
                ]
            }
            {% endif -%}
        }
    ) {
        {{ modelFieldUnique.name }}
    }
}
```
{% endif -%}

### Deleting a single {{ model.name }}

Single {{ model.name }} delete mutations take one input:

- `where`: `{{ model.name }}WhereUniqueInput!` A required object type specifying a field with a unique constraint (like {{ modelFieldUnique.name }}).

**Standard delete mutation**

```graphql
mutation {
    delete{{ model.name }}(
        where: {
            {{ modelFieldUnique.name }}: {{ modelFieldUnique.sample | safe }}
        }
    ) {
        {% for field in model.fields -%}
        {% if not field.relation -%}
        {{ field.name }}
        {% endif -%}
        {% endfor -%}
    }
}
```

### Creating multiple {{ model.pluralizedName }}

Multiple {{ model.pluralizedName }} create mutations take one input:

- `data`: `[{{ model.name }}CreateManyInput!]` A required array specifying the data to create new records.
- `skipDuplicates`: `Boolean` An optional Boolean specifying if unique fields or ID fields that already exist should be skipped.

**Standard deleteMany mutation**

```graphql
mutation {
    createMany{{ model.pluralizedName }}(
        data: [
            { {{ modelField.name }}: {{ modelField.sample | safe }} }
            { {{ modelField.name }}: {{ modelField.sample | safe }} }
            { {{ modelField.name }}: {{ modelField.sample | safe }} }
        ],
        skipDuplicates: true
    ) {
        count
    }
}
```

> `createMany{{ model.pluralizedName }}` returns an integer that represents the number of records that were created.

### Updating multiple {{ model.pluralizedName }}

Multiple {{ model.pluralizedName }} update mutations take two inputs:

- `where`: `{{ model.name }}WhereFilterInput!` A required object type to filter the content based on a nested set of criteria.
- `data`: `{{ model.name }}UpdateInput!` A required object type specifying the data to update records with.

**Standard updateMany mutation**

```graphql
mutation {
    updateMany{{ model.pluralizedName }}(
        where: { {{ modelField.name }}: {{ modelField.sample | safe }} }
        data: { {{ modelField.name }}: {{ modelField.sample | safe }} }
    ) {
        count
    }
}
```

> `updateMany{{ model.pluralizedName }}` returns an integer that represents the number of records that were updated.

### Deleting multiple {{ model.pluralizedName }}

Multiple {{ model.pluralizedName }} delete mutations can take one input:

- `where`: `{{ model.name }}WhereFilterInput!` A required object type to filter the content based on a nested set of criteria.

**Standard deleteMany mutation**

```graphql
mutation {
    deleteMany{{ model.pluralizedName }}(
        where: {
            {{ modelField.name }}: {{ modelField.sample | safe }}
        }
    ) {
        count
    }
}
```

> `deleteMany{{ model.pluralizedName }}` returns an integer that represents the number of records that were deleted.

## Subscriptions

Subscriptions allows listen for data changes when a specific event happens, in real-time.

### Subscribing to a single {{ model.name }} creation

Triggered from `create{{ model.name }}` mutation (excl. `createMany{{ model.pluralizedName }}` and `upsert{{ model.name }}`).

```graphql
subscription {
    onCreated{{ model.name }} {
        {% for field in model.fields -%}
        {% if not field.relation -%}
        {{ field.name }}
        {% endif -%}
        {% endfor -%}
    }
}
```

### Subscribing to a single {{ model.name }} update

Triggered from `update{{ model.name }}` mutation (excl. `updateMany{{ model.pluralizedName }}` and `upsert{{ model.name }}`).

```graphql
subscription {
    onUpdated{{ model.name }} {
        {% for field in model.fields -%}
        {% if not field.relation -%}
        {{ field.name }}
        {% endif -%}
        {% endfor -%}
    }
}
```

### Subscribing to a single {{ model.name }} upsert

Triggered from `upsert{{ model.name }}` mutation.

```graphql
subscription {
    onUpserted{{ model.name }} {
        {% for field in model.fields -%}
        {% if not field.relation -%}
        {{ field.name }}
        {% endif -%}
        {% endfor -%}
    }
}
```

### Subscribing to a single {{ model.name }} deletion

Triggered from `delete{{ model.name }}` mutation (excl. `deleteMany{{ model.pluralizedName }}`).

```graphql
subscription {
    onDeleted{{ model.name }} {
        {% for field in model.fields -%}
        {% if not field.relation -%}
        {{ field.name }}
        {% endif -%}
        {% endfor -%}
    }
}
```

### Subscribing to a single {{ model.name }} mutation

Triggered from ANY SINGLE record mutation (excl. `on*Many{{ model.pluralizedName }}`).

```graphql
subscription {
    onMutated{{ model.name }} {
        {% for field in model.fields -%}
        {% if not field.relation -%}
        {{ field.name }}
        {% endif -%}
        {% endfor -%}
    }
}
```

### Subscribing to many {{ model.name }} creations

Triggered from `createMany{{ model.pluralizedName }}` mutation.

```graphql
subscription {
    onCreatedMany{{ model.pluralizedName }} { count }
}
```

### Subscribing to many {{ model.name }} updates

Triggered from `updateMany{{ model.pluralizedName }}` mutation.

```graphql
subscription {
    onUpdatedMany{{ model.pluralizedName }} { count }
}
```

### Subscribing to many {{ model.name }} deletions

Triggered from `deleteMany{{ model.pluralizedName }}` mutation.

```graphql
subscription {
    onDeletedMany{{ model.pluralizedName }} { count }
}
```

### Subscribing to many {{ model.name }} mutations

Triggered from ANY MULTIPLE records mutation (excl. single record mutations).

```graphql
subscription {
    onMutatedMany{{ model.pluralizedName }} { count }
}
```